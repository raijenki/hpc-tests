syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.mpi_monitor";
option java_outer_classname = "MPIMonitorProto";
option objc_class_prefix = "MMG";

package mpi_monitor;

// Interface exported by the server.
service Monitor {
	// We order the server to scale (from: scheduler, to: MPIServer)
	rpc Scale(additionalNodes) returns (Confirmation) {}

	// We send the files for updating all our hosts (from: MPIServer, to: client)
	rpc RetrieveKeys(nodeName) returns (SSHKeys) {}

	// We tell that our auxiliary pods are ready to start the job
	rpc JobInit(nodeName) returns (Confirmation) {}

	// This should be used for checking whether the master is alive
	rpc activeServer(nodeName) returns (Confirmation) {} 
}

message Scale {
	int32 nodes = 1;
}

message availNodes {
	int32 nodes = 1;
}

message nodeName {
	string nodeName = 1;
}

message Confirmation {
	string confirmMessage = 1;
	int32 confirmId = 2;
}

message SSHKeys {
	string pubJobKey = 1;
	int32 confirmId = 3;
}